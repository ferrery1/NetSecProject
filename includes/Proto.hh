#ifndef PROTO_HH_
# define PROTO_HH_

# include <netinet/if_ether.h>
//# include "Packet.hh"
# include "ARP.hh"
# include "UDP.hh"
# include "IP.hh"
# include "ICMP.hh"
# include "TCP.hh"
# include "IPv6.hh"
// class Packet{};
//  class ARPPacket : public Packet{};
//  class UDPPacket : public Packet{};
//  class TCPPacket : public Packet{};
//  class ICMPPacket : public Packet{};
//  class IPPacket : public Packet{};
//  class IPV6Packet : public Packet{};

class Proto {
private:
  struct s_proto_obj {
    int		proto_ID;
    Packet	*type;
    std::string name;
  };
  Packet *_unknownPacket;
  ARPPacket *_arp;
  UDPPacket *_udp;
  TCPPacket *_tcp;
  ICMPPacket *_icmp;
  IPPacket *_ip;
  IPV6Packet *_ipv6;

  // struct s_proto_obj _frameProt[74] =
  //   {
  //     { ETH_P_LOOP, _unknownPacket, "" },
  //     { ETH_P_PUP, _unknownPacket, "" },
  //     { ETH_P_PUPAT, _unknownPacket, "" },
  //     { ETH_P_TSN, _unknownPacket, "" },
  //     { ETH_P_IP, (IPPacket*)(_ip), "IP" },
  //     { ETH_P_X25, _unknownPacket, "" },
  //     { ETH_P_ARP, (ARPPacket*)(_arp), "ARP" },
  //     { ETH_P_IEEEPUP, _unknownPacket, "" },
  //     { ETH_P_IEEEPUPAT, _unknownPacket, "" },
  //     { ETH_P_DEC, _unknownPacket, "" },
  //     { ETH_P_DNA_DL, _unknownPacket, "" },
  //     { ETH_P_DNA_RC, _unknownPacket, "" },
  //     { ETH_P_DNA_RT, _unknownPacket, "" },
  //     { ETH_P_LAT, _unknownPacket, "" },
  //     { ETH_P_DIAG, _unknownPacket, "" },
  //     { ETH_P_CUST, _unknownPacket, "" },
  //     { ETH_P_SCA, _unknownPacket, "" },
  //     { ETH_P_TEB, _unknownPacket, "" },
  //     { ETH_P_RARP, _unknownPacket, "" },
  //     { ETH_P_ATALK, _unknownPacket, "" },
  //     { ETH_P_AARP, _unknownPacket, "" },
  //     { ETH_P_8021Q, _unknownPacket, "" },
  //     { ETH_P_IPX, _unknownPacket, "" },
  //     { ETH_P_IPV6, _ipv6, "" },
  //     { ETH_P_PAUSE, _unknownPacket, "" },
  //     { ETH_P_SLOW, _unknownPacket, "" },
  //     { ETH_P_WCCP, _unknownPacket, "" },
  //     { ETH_P_MPLS_UC, _unknownPacket, "" },
  //     { ETH_P_MPLS_MC, _unknownPacket, "" },
  //     { ETH_P_ATMMPOA, _unknownPacket, "" },
  //     { ETH_P_PPP_DISC, _unknownPacket, "" },
  //     { ETH_P_PPP_SES, _unknownPacket, "" },
  //     { ETH_P_LINK_CTL, _unknownPacket, "" },
  //     { ETH_P_ATMFATE, _unknownPacket, "" },
  //     { ETH_P_PAE, _unknownPacket, "" },
  //     { ETH_P_AOE, _unknownPacket, "" },
  //     { ETH_P_8021AD, _unknownPacket, "" },
  //     { ETH_P_802_EX1, _unknownPacket, "" },
  //     { ETH_P_TIPC, _unknownPacket, "" },
  //     { ETH_P_8021AH, _unknownPacket, "" },
  //     { ETH_P_MVRP, _unknownPacket, "" },
  //     { ETH_P_1588, _unknownPacket, "" },
  //     { ETH_P_PRP, _unknownPacket, "" },
  //     { ETH_P_FCOE, _unknownPacket, "" },
  //     { ETH_P_TDLS, _unknownPacket, "" },
  //     { ETH_P_FIP, _unknownPacket, "" },
  //     { ETH_P_80221, _unknownPacket, "" },
  //     { ETH_P_LOOPBACK, _unknownPacket, "" },
  //     { ETH_P_802_3_MIN, _unknownPacket, "" },
  //     { ETH_P_802_3, _unknownPacket, "" },
  //     { ETH_P_AX25, _unknownPacket, "" },
  //     { ETH_P_802_2, _unknownPacket, "" },
  //     { ETH_P_SNAP, _unknownPacket, "" },
  //     { ETH_P_DDCMP, _unknownPacket, "" },
  //     { ETH_P_WAN_PPP, _unknownPacket, "" },
  //     { ETH_P_PPP_MP, _unknownPacket, "" },
  //     { ETH_P_LOCALTALK, _unknownPacket, "" },
  //     { ETH_P_CAN, _unknownPacket, "" },
  //     { ETH_P_CANFD, _unknownPacket, "" },
  //     { ETH_P_PPPTALK, _unknownPacket, "" },
  //     { ETH_P_TR_802_2, _unknownPacket, "" },
  //     { ETH_P_MOBITEX, _unknownPacket, "" },
  //     { ETH_P_CONTROL, _unknownPacket, "" },
  //     { ETH_P_IRDA, _unknownPacket, "" },
  //     { ETH_P_ECONET, _unknownPacket, "" },
  //     { ETH_P_HDLC, _unknownPacket, "" },
  //     { ETH_P_ARCNET, _unknownPacket, "" },
  //     { ETH_P_DSA, _unknownPacket, "" },
  //     { ETH_P_TRAILER, _unknownPacket, "" },
  //     { ETH_P_PHONET, _unknownPacket, "" },
  //     { ETH_P_IEEE802154, _unknownPacket, "" },
  //     { ETH_P_CAIF, _unknownPacket, "" },
  //     { ETH_P_XDSA, _unknownPacket, "" },
  //     {-1, _unknownPacket, "NONE"}
  //   };
  
  // struct s_proto_obj _tabTcpip[60] = {
  //   {0, (IPPacket*)(_ip), "IPv4"}, 
  //   {1, (ICMPPacket*)(_icmp), "ICMP"}, 
  //   {2, _unknownPacket, "IGMP"}, 
  //   {3, _unknownPacket, "GGP"}, 
  //   {4, _unknownPacket, "IP-ENCAP"}, 
  //   {5, _unknownPacket, "ST"}, 
  //   {6, (TCPPacket*)(_tcp), "TCP"}, 
  //   {8, _unknownPacket, "EGP"}, 
  //   {9, _unknownPacket, "IGP"}, 
  //   {12, _unknownPacket, "PUP"}, 
  //   {17, (UDPPacket*)(_udp), "UDP"}, 
  //   {20, _unknownPacket, "HMP"}, 
  //   {22, _unknownPacket, "XNS-IDP"}, 
  //   {27, _unknownPacket, "RDP"}, 
  //   {29, _unknownPacket, "ISO-TP4"}, 
  //   {33, _unknownPacket, "DCCP"}, 
  //   {36, _unknownPacket, "XTP"}, 
  //   {37, _unknownPacket, "DDP"}, 
  //   {38, _unknownPacket, "IDPR-CMTP"}, 
  //   {41, _ipv6, "IPv6"}, 
  //   {43, _unknownPacket, "IPv6-ROUTE"}, 
  //   {44, _unknownPacket, "IPv6-FRAG"}, 
  //   {45, _unknownPacket, "IDRP"}, 
  //   {46, _unknownPacket, "RSVP"}, 
  //   {47, _unknownPacket, "GRE"}, 
  //   {50, _unknownPacket, "IPSEC-ESP"}, 
  //   {51, _unknownPacket, "IPSEC-AH"}, 
  //   {57, _unknownPacket, "SKIP"}, 
  //   {58, _unknownPacket, "IPv6-ICMP"}, 
  //   {59, _unknownPacket, "IPv6-NoNxt"}, 
  //   {60, _unknownPacket, "IPv6-Opts"}, 
  //   {73, _unknownPacket, "RSPF"}, 
  //   {81, _unknownPacket, "VMTP"}, 
  //   {88, _unknownPacket, "EIGRP"}, 
  //   {89, _unknownPacket, "OSPFIGP"}, 
  //   {93, _unknownPacket, "AX.25"}, 
  //   {94, _unknownPacket, "IPIP"}, 
  //   {97, _unknownPacket, "ETHERIP"}, 
  //   {98, _unknownPacket, "ENCAP"}, 
  //   {99, _unknownPacket, "Anyprivateencryptionscheme"}, 
  //   {103, _unknownPacket, "PIM"}, 
  //   {108, _unknownPacket, "IPCOMP"}, 
  //   {112, _unknownPacket, "VRRP"}, 
  //   {115, _unknownPacket, "L2TP"}, 
  //   {124, _unknownPacket, "ISIS"}, 
  //   {132, _unknownPacket, "SCTP"}, 
  //   {132, _unknownPacket, "SCTP"}, 
  //   {133, _unknownPacket, "FC"}, 
  //   {135, _unknownPacket, "MOBILITY-HEADER"}, 
  //   {136, _unknownPacket, "UDPLITE"}, 
  //   {137, _unknownPacket, "MPLS-IN-IP"}, 
  //   {138, _unknownPacket, "MANET"}, 
  //   {139, _unknownPacket, "HIP"}, 
  //   {140, _unknownPacket, "SHIM6"}, 
  //   {141, _unknownPacket, "WESP"}, 
  //   {142, _unknownPacket, "ROHC"},
  //   {-1, _unknownPacket, "NONE"}
  // };
    struct s_proto_obj _frameProt[74] =
    {
      { ETH_P_LOOP, new Packet(), "" },
      { ETH_P_PUP, new Packet(), "" },
      { ETH_P_PUPAT, new Packet(), "" },
      { ETH_P_TSN, new Packet(), "" },
      { ETH_P_IP, new IPPacket(), "IP" },
      { ETH_P_X25, new Packet(), "" },
      { ETH_P_ARP, new ARPPacket(), "ARP" },
      { ETH_P_IEEEPUP, new Packet(), "" },
      { ETH_P_IEEEPUPAT, new Packet(), "" },
      { ETH_P_DEC, new Packet(), "" },
      { ETH_P_DNA_DL, new Packet(), "" },
      { ETH_P_DNA_RC, new Packet(), "" },
      { ETH_P_DNA_RT, new Packet(), "" },
      { ETH_P_LAT, new Packet(), "" },
      { ETH_P_DIAG, new Packet(), "" },
      { ETH_P_CUST, new Packet(), "" },
      { ETH_P_SCA, new Packet(), "" },
      { ETH_P_TEB, new Packet(), "" },
      { ETH_P_RARP, new Packet(), "" },
      { ETH_P_ATALK, new Packet(), "" },
      { ETH_P_AARP, new Packet(), "" },
      { ETH_P_8021Q, new Packet(), "" },
      { ETH_P_IPX, new Packet(), "" },
      { ETH_P_IPV6, _ipv6, "" },
      { ETH_P_PAUSE, new Packet(), "" },
      { ETH_P_SLOW, new Packet(), "" },
      { ETH_P_WCCP, new Packet(), "" },
      { ETH_P_MPLS_UC, new Packet(), "" },
      { ETH_P_MPLS_MC, new Packet(), "" },
      { ETH_P_ATMMPOA, new Packet(), "" },
      { ETH_P_PPP_DISC, new Packet(), "" },
      { ETH_P_PPP_SES, new Packet(), "" },
      { ETH_P_LINK_CTL, new Packet(), "" },
      { ETH_P_ATMFATE, new Packet(), "" },
      { ETH_P_PAE, new Packet(), "" },
      { ETH_P_AOE, new Packet(), "" },
      { ETH_P_8021AD, new Packet(), "" },
      { ETH_P_802_EX1, new Packet(), "" },
      { ETH_P_TIPC, new Packet(), "" },
      { ETH_P_8021AH, new Packet(), "" },
      { ETH_P_MVRP, new Packet(), "" },
      { ETH_P_1588, new Packet(), "" },
      { ETH_P_PRP, new Packet(), "" },
      { ETH_P_FCOE, new Packet(), "" },
      { ETH_P_TDLS, new Packet(), "" },
      { ETH_P_FIP, new Packet(), "" },
      { ETH_P_80221, new Packet(), "" },
      { ETH_P_LOOPBACK, new Packet(), "" },
      { ETH_P_802_3_MIN, new Packet(), "" },
      { ETH_P_802_3, new Packet(), "" },
      { ETH_P_AX25, new Packet(), "" },
      { ETH_P_802_2, new Packet(), "" },
      { ETH_P_SNAP, new Packet(), "" },
      { ETH_P_DDCMP, new Packet(), "" },
      { ETH_P_WAN_PPP, new Packet(), "" },
      { ETH_P_PPP_MP, new Packet(), "" },
      { ETH_P_LOCALTALK, new Packet(), "" },
      { ETH_P_CAN, new Packet(), "" },
      { ETH_P_CANFD, new Packet(), "" },
      { ETH_P_PPPTALK, new Packet(), "" },
      { ETH_P_TR_802_2, new Packet(), "" },
      { ETH_P_MOBITEX, new Packet(), "" },
      { ETH_P_CONTROL, new Packet(), "" },
      { ETH_P_IRDA, new Packet(), "" },
      { ETH_P_ECONET, new Packet(), "" },
      { ETH_P_HDLC, new Packet(), "" },
      { ETH_P_ARCNET, new Packet(), "" },
      { ETH_P_DSA, new Packet(), "" },
      { ETH_P_TRAILER, new Packet(), "" },
      { ETH_P_PHONET, new Packet(), "" },
      { ETH_P_IEEE802154, new Packet(), "" },
      { ETH_P_CAIF, new Packet(), "" },
      { ETH_P_XDSA, new Packet(), "" },
      {-1, new Packet(), "NONE"}
    };
  
  struct s_proto_obj _tabTcpip[60] = {
    {0, new IPPacket(), "IPv4"}, 
    {1, new ICMPPacket(), "ICMP"}, 
    {2, new Packet(), "IGMP"}, 
    {3, new Packet(), "GGP"}, 
    {4, new Packet(), "IP-ENCAP"}, 
    {5, new Packet(), "ST"}, 
    {6, new TCPPacket(), "TCP"}, 
    {8, new Packet(), "EGP"}, 
    {9, new Packet(), "IGP"}, 
    {12, new Packet(), "PUP"}, 
    {17, new UDPPacket(), "UDP"}, 
    {20, new Packet(), "HMP"}, 
    {22, new Packet(), "XNS-IDP"}, 
    {27, new Packet(), "RDP"}, 
    {29, new Packet(), "ISO-TP4"}, 
    {33, new Packet(), "DCCP"}, 
    {36, new Packet(), "XTP"}, 
    {37, new Packet(), "DDP"}, 
    {38, new Packet(), "IDPR-CMTP"}, 
    {41, _ipv6, "IPv6"}, 
    {43, new Packet(), "IPv6-ROUTE"}, 
    {44, new Packet(), "IPv6-FRAG"}, 
    {45, new Packet(), "IDRP"}, 
    {46, new Packet(), "RSVP"}, 
    {47, new Packet(), "GRE"}, 
    {50, new Packet(), "IPSEC-ESP"}, 
    {51, new Packet(), "IPSEC-AH"}, 
    {57, new Packet(), "SKIP"}, 
    {58, new Packet(), "IPv6-ICMP"}, 
    {59, new Packet(), "IPv6-NoNxt"}, 
    {60, new Packet(), "IPv6-Opts"}, 
    {73, new Packet(), "RSPF"}, 
    {81, new Packet(), "VMTP"}, 
    {88, new Packet(), "EIGRP"}, 
    {89, new Packet(), "OSPFIGP"}, 
    {93, new Packet(), "AX.25"}, 
    {94, new Packet(), "IPIP"}, 
    {97, new Packet(), "ETHERIP"}, 
    {98, new Packet(), "ENCAP"}, 
    {99, new Packet(), "Anyprivateencryptionscheme"}, 
    {103, new Packet(), "PIM"}, 
    {108, new Packet(), "IPCOMP"}, 
    {112, new Packet(), "VRRP"}, 
    {115, new Packet(), "L2TP"}, 
    {124, new Packet(), "ISIS"}, 
    {132, new Packet(), "SCTP"}, 
    {132, new Packet(), "SCTP"}, 
    {133, new Packet(), "FC"}, 
    {135, new Packet(), "MOBILITY-HEADER"}, 
    {136, new Packet(), "UDPLITE"}, 
    {137, new Packet(), "MPLS-IN-IP"}, 
    {138, new Packet(), "MANET"}, 
    {139, new Packet(), "HIP"}, 
    {140, new Packet(), "SHIM6"}, 
    {141, new Packet(), "WESP"}, 
    {142, new Packet(), "ROHC"},
    {-1, new Packet(), "NONE"}
  };
public:
  Proto();
  ~Proto();
  Packet *getFrameProt(int prot_ID);
  Packet *getTCPIPProt(int prot_ID);
};

#endif
